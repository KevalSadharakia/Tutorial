import com.bank.api.controllers.AccountController;
import com.bank.api.dto.TransferRequest;
import com.bank.api.entity.Account;
import com.bank.api.helper.AccountLogics;
import com.bank.api.services.AccountService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.security.Principal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class AccountControllerTest {

    @InjectMocks
    private AccountController accountController;

    @Mock
    private AccountLogics accountLogics;

    @Mock
    private AccountService accountService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testTransferMoney() {
        TransferRequest transferRequest = new TransferRequest();
        Principal principal = mock(Principal.class);
        
        // Mock the behavior of accountLogics.transferMoney
        when(accountLogics.transferMoney(transferRequest, principal)).thenReturn(ResponseEntity.ok("Transfer successful"));

        ResponseEntity<Object> response = accountController.transferMoney(transferRequest, principal);

        assertEquals(ResponseEntity.ok("Transfer successful"), response);
    }

    @Test
    public void testGetAccountInfo() {
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountLogics.getAccountInfo
        when(accountLogics.getAccountInfo(principal)).thenReturn(ResponseEntity.ok("Account info"));

        ResponseEntity<Object> response = accountController.getAccountInfo(principal);

        assertEquals(ResponseEntity.ok("Account info"), response);
    }

    @Test
    public void testGetTransactions() {
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountLogics.getTransaction
        when(accountLogics.getTransaction(principal)).thenReturn(ResponseEntity.ok("Transactions"));

        ResponseEntity<Object> response = accountController.getTransactions(principal);

        assertEquals(ResponseEntity.ok("Transactions"), response);
    }

    @Test
    public void testUpdate() {
        Account account = new Account();
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountService.updateAccount
        doNothing().when(accountService).updateAccount(account);

        // Mock the behavior of accountService.getAccount
        when(accountService.getAccount(account.getAccountNumber())).thenReturn(account);

        ResponseEntity<Object> response = accountController.update(account, principal);

        assertEquals(ResponseEntity.ok(account), response);
    }

    @Test
    public void testGetAccount() {
        int accountId = 1;
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountLogics.getAccount
        when(accountLogics.getAccount(accountId, principal)).thenReturn(ResponseEntity.ok("Account details"));

        ResponseEntity<Object> response = accountController.getAccount(accountId, principal);

        assertEquals(ResponseEntity.ok("Account details"), response);
    }

    @Test
    public void testGetAccountTransactions() {
        int accountId = 1;
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountLogics.getAccountTransaction
        when(accountLogics.getAccountTransaction(accountId, principal)).thenReturn(ResponseEntity.ok("Account transactions"));

        ResponseEntity<Object> response = accountController.getAccountTransactions(accountId, principal);

        assertEquals(ResponseEntity.ok("Account transactions"), response);
    }

    // Write similar test cases for other controller methods...
}










import com.bank.api.auth.JwtHelper;
import com.bank.api.dto.JWTRequest;
import com.bank.api.dto.JWTResponse;
import com.bank.api.entity.PersonalDetails;
import com.bank.api.services.PersonalDetailsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.security.Principal;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AuthenticationControllerTest {

    @InjectMocks
    private AuthenticationController authenticationController;

    @Mock
    private JwtHelper jwtHelper;

    @Mock
    private PersonalDetailsService personalDetailsService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testLoginValidCredentials() {
        JWTRequest jwtRequest = new JWTRequest();
        jwtRequest.setUsername("testUser");
        jwtRequest.setPassword("testPassword");

        when(personalDetailsService.isLoginCredentialValid(jwtRequest)).thenReturn(true);
        when(jwtHelper.generateToken(jwtRequest.getUsername())).thenReturn("testToken");

        ResponseEntity<Object> response = authenticationController.login(jwtRequest);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody() instanceof JWTResponse);
    }

    @Test
    public void testLoginInvalidCredentials() {
        JWTRequest jwtRequest = new JWTRequest();
        jwtRequest.setUsername("invalidUser");
        jwtRequest.setPassword("invalidPassword");

        when(personalDetailsService.isLoginCredentialValid(jwtRequest)).thenReturn(false);

        ResponseEntity<Object> response = authenticationController.login(jwtRequest);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Invalid User", response.getBody());
    }

    @Test
    public void testIsValidAuthenticatedUser() {
        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setEmail("testUser@example.com");

        Principal principal = () -> personalDetails.getEmail();

        ResponseEntity<Object> response = authenticationController.isValid(principal);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("aaa", response.getBody());
    }

    @Test
    public void testIsValidUnauthenticatedUser() {
        Principal principal = null;

        ResponseEntity<Object> response = authenticationController.isValid(principal);

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertFalse((Boolean) response.getBody());
    }
}














import com.bank.api.controllers.BeneficiaryController;
import com.bank.api.dto.BeneficiaryRequest;
import com.bank.api.logics.BeneficiaryLogics;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.security.Principal;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class BeneficiaryControllerTest {

    @InjectMocks
    private BeneficiaryController beneficiaryController;

    @Mock
    private BeneficiaryLogics beneficiaryLogics;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddBeneficiary() {
        BeneficiaryRequest beneficiaryRequest = new BeneficiaryRequest();
        Principal principal = mock(Principal.class);

        // Mock the behavior of beneficiaryLogics.addBeneficiary
        when(beneficiaryLogics.addBeneficiary(beneficiaryRequest, principal))
                .thenReturn(ResponseEntity.ok("Beneficiary added successfully"));

        ResponseEntity<Object> response = beneficiaryController.responseEntity(beneficiaryRequest, principal);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Beneficiary added successfully", response.getBody());
    }

    @Test
    public void testGetBeneficiaries() {
        Principal principal = mock(Principal.class);

        // Mock the behavior of beneficiaryLogics.getBeneficiaries
        when(beneficiaryLogics.getBeneficiaries(principal))
                .thenReturn(ResponseEntity.ok(List.of("Beneficiary1", "Beneficiary2")));

        ResponseEntity<Object> response = beneficiaryController.responseEntity1(principal);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(List.of("Beneficiary1", "Beneficiary2"), response.getBody());
    }
}
















import com.bank.api.dto.*;
import com.bank.api.entity.PersonalDetails;
import com.bank.api.helper.ModelConverter;
import com.bank.api.helper.ValueExtrecterFromPrinciple;
import com.bank.api.services.PersonalDetailsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import static org.mockito.Mockito.*;

public class PersonalDetailsControllerTest {

    @InjectMocks
    private PersonalDetailsController personalDetailsController;

    @Mock
    private PersonalDetailsService personalDetailsService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateAccount() {
        // Create mock data for the test case
        PersonalDetailsRequest personalDetailsRequest = new PersonalDetailsRequest();
        personalDetailsRequest.setEmail("test@example.com");
        // Add other required fields in the request

        when(personalDetailsService.isExist(personalDetailsRequest.getEmail())).thenReturn(false);

        PersonalDetails personalDetails = new PersonalDetails();
        // Set up the behavior of the mock dependencies
        when(personalDetailsService.save(any(PersonalDetails.class))).thenReturn(personalDetails);

        // Call the createAccount method
        ResponseEntity<Object> response = personalDetailsController.createAccount(personalDetailsRequest);

        // Verify the behavior and response
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(personalDetails.getAccountNumber(), ((AccountCreatedResponse) response.getBody()).getAccountNumber());
    }

    // Similar test cases for other methods...

    @Test
    public void testGetDetails() {
        // Create mock data for the test case
        Principal principal = mock(Principal.class);
        when(principal.getName()).thenReturn("test@example.com");

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setEmail("test@example.com");
        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByEmail("test@example.com")).thenReturn(personalDetails);

        // Call the getDetails method
        ResponseEntity<Object> response = personalDetailsController.getDetails(principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        // Add assertions for the expected response body
    }

    // Similar test cases for other methods...

    @Test
    public void testGetDetailsOfAPerson() {
        // Create mock data for the test case
        Principal principal = mock(Principal.class);
        when(principal.getName()).thenReturn("test@example.com");
        int accountId = 1;

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setAccountNumber(accountId);
        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(accountId)).thenReturn(personalDetails);

        // Call the getDetailsOfAPerson method
        ResponseEntity<Object> response = personalDetailsController.getDetailsOfAPerson(accountId, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        // Add assertions for the expected response body
    }

    @Test
    public void testGetUsername() {
        // Create mock data for the test case
        ForgotUsernameRequest forgotUsernameRequest = new ForgotUsernameRequest();
        forgotUsernameRequest.setAccountNumber(123);
        forgotUsernameRequest.setAadharNumber("1234567890");

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setAccountNumber(forgotUsernameRequest.getAccountNumber());
        personalDetails.setIdentityProofNumber(forgotUsernameRequest.getAadharNumber());

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(forgotUsernameRequest.getAccountNumber())).thenReturn(personalDetails);

        // Call the getUsername method
        ResponseEntity<Object> response = personalDetailsController.getUsername(forgotUsernameRequest);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody().toString().contains(personalDetails.getUsername()));
    }

    @Test
    public void testForgotPassword() {
        // Create mock data for the test case
        ForgotPasswordRequest forgotPasswordRequest = new ForgotPasswordRequest();
        forgotPasswordRequest.setAccountNumber(123);
        forgotPasswordRequest.setAadharNumber("1234567890");
        forgotPasswordRequest.setUserId("testUser");
        forgotPasswordRequest.setNewPassword("newPassword");

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setAccountNumber(forgotPasswordRequest.getAccountNumber());
        personalDetails.setIdentityProofNumber(forgotPasswordRequest.getAadharNumber());
        personalDetails.setUsername(forgotPasswordRequest.getUserId());

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(forgotPasswordRequest.getAccountNumber())).thenReturn(personalDetails);

        // Call the forgotPassword method
        ResponseEntity<Object> response = personalDetailsController.forgotPassword(forgotPasswordRequest);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody().toString().contains("Password is updated."));
    }


    // Similar test cases for other methods...
}






import com.bank.api.auth.JwtAuthenticationEntryPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.security.core.AuthenticationException;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import java.io.PrintWriter;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class JwtAuthenticationEntryPointTest {

    @InjectMocks
    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCommence() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        AuthenticationException authException = new AuthenticationException("Access Denied") {};

        jwtAuthenticationEntryPoint.commence(request, response, authException);

        assertEquals(HttpServletResponse.SC_UNAUTHORIZED, response.getStatus());
        assertEquals("Access Denied entry !! Access Denied", response.getContentAsString());
    }
}














import com.bank.api.auth.JwtHelper;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import java.util.Date;
import java.util.function.Function;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class JwtHelperTest {

    @InjectMocks
    private JwtHelper jwtHelper;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetUsernameFromToken() {
        String token = createTokenWithSubject("testUser");
        String username = jwtHelper.getUsernameFromToken(token);
        assertEquals("testUser", username);
    }

    @Test
    public void testGetExpirationDateFromToken() {
        String token = createTokenWithSubject("testUser");
        Date expirationDate = jwtHelper.getExpirationDateFromToken(token);
        assertNotNull(expirationDate);
    }

    @Test
    public void testGetClaimFromToken() {
        String token = createTokenWithSubject("testUser");
        String claimValue = jwtHelper.getClaimFromToken(token, Claims::getSubject);
        assertEquals("testUser", claimValue);
    }

    @Test
    public void testIsTokenExpired_ValidToken() {
        String token = createTokenWithSubject("testUser");
        assertFalse(jwtHelper.isTokenExpired(token));
    }

    @Test
    public void testIsTokenExpired_ExpiredToken() {
        String expiredToken = createExpiredTokenWithSubject("testUser");
        assertTrue(jwtHelper.isTokenExpired(expiredToken));
    }

    @Test
    public void testGenerateToken() {
        String username = "testUser";
        String token = jwtHelper.generateToken(username);
        assertNotNull(token);
    }

    @Test
    public void testValidateToken_ValidToken() {
        String token = createTokenWithSubject("testUser");
        assertTrue(jwtHelper.validateToken(token, "testUser"));
    }

    @Test
    public void testValidateToken_InvalidToken() {
        String token = createTokenWithSubject("testUser");
        assertFalse(jwtHelper.validateToken(token, "invalidUser"));
    }

    private String createTokenWithSubject(String subject) {
        return Jwts.builder()
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + JwtHelper.JWT_TOKEN_VALIDITY * 1000))
                .signWith(SignatureAlgorithm.HS512, "testSecret")
                .compact();
    }

    private String createExpiredTokenWithSubject(String subject) {
        return Jwts.builder()
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() - 1000)) // Expired token
                .signWith(SignatureAlgorithm.HS512, "testSecret")
                .compact();
    }
}



import com.bank.api.auth.JwtAuthenticationEntryPoint;
import com.bank.api.auth.JwtAuthenticationFilter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfigurationSource;

import static org.mockito.Mockito.*;

public class SecurityConfigTest {

    @InjectMocks
    private SecurityConfig securityConfig;

    @Mock
    private JwtAuthenticationEntryPoint authenticationEntryPoint;

    @Mock
    private JwtAuthenticationFilter authenticationFilter;

    @Mock
    private CorsConfigurationSource corsConfigurationSource;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSecurityFilterChain() throws Exception {
        HttpSecurity httpSecurity = mock(HttpSecurity.class);

        SecurityFilterChain filterChain = securityConfig.securityFilterChain(httpSecurity);

        verify(httpSecurity, times(1)).csrf(any());
        verify(httpSecurity, times(1)).authorizeRequests();
        verify(httpSecurity, times(1)).exceptionHandling(any());
        verify(httpSecurity, times(1)).sessionManagement(any());
        verify(httpSecurity, times(1)).cors(corsConfigurationSource);

        // Verify that the JwtAuthenticationFilter is added before UsernamePasswordAuthenticationFilter
        verify(httpSecurity, times(1)).addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);

        // Additional assertions or configuration verifications can be added here as needed
    }
}









SERVICE












import com.bank.api.entity.Account;
import com.bank.api.repositories.AccountRepository;
import com.bank.api.services.AccountService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AccountServiceTest {

    @InjectMocks
    private AccountService accountService;

    @Mock
    private AccountRepository accountRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateAccount() {
        Account account = new Account();
        account.setAccountNumber(123);

        when(accountRepository.save(account)).thenReturn(account);

        assertDoesNotThrow(() -> accountService.updateAccount(account));
    }

    @Test
    public void testUpdateAccount_NullAccount() {
        assertThrows(RuntimeException.class, () -> accountService.updateAccount(null));
    }

    @Test
    public void testGetAccount() {
        int accountNumber = 123;
        Account account = new Account();
        account.setAccountNumber(accountNumber);

        when(accountRepository.findById(accountNumber)).thenReturn(Optional.of(account));

        Account retrievedAccount = accountService.getAccount(accountNumber);

        assertNotNull(retrievedAccount);
        assertEquals(accountNumber, retrievedAccount.getAccountNumber());
    }

    @Test
    public void testGetAccount_NotFound() {
        int accountNumber = 123;

        when(accountRepository.findById(accountNumber)).thenReturn(Optional.empty());

        Account retrievedAccount = accountService.getAccount(accountNumber);

        assertNull(retrievedAccount);
    }
}








import com.bank.api.entity.Beneficiary;
import com.bank.api.repositories.BeneficiaryRepository;
import com.bank.api.services.BeneficiaryService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class BeneficiaryServiceTest {

    @InjectMocks
    private BeneficiaryService beneficiaryService;

    @Mock
    private BeneficiaryRepository beneficiaryRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddBeneficiary() {
        Beneficiary beneficiary = new Beneficiary();

        when(beneficiaryRepository.save(beneficiary)).thenReturn(beneficiary);

        Object result = beneficiaryService.add(beneficiary);

        assertNotNull(result);
        assertEquals(beneficiary, result);
    }

    @Test
    public void testGetBeneficiaryList() {
        String email = "test@example.com";
        Beneficiary beneficiary1 = new Beneficiary();
        Beneficiary beneficiary2 = new Beneficiary();

        when(beneficiaryRepository.findAllByAddedByEmail(email)).thenReturn(Arrays.asList(beneficiary1, beneficiary2));

        List<Beneficiary> beneficiaries = beneficiaryService.getBeneficiaryList(email);

        assertNotNull(beneficiaries);
        assertEquals(2, beneficiaries.size());
        assertTrue(beneficiaries.contains(beneficiary1));
        assertTrue(beneficiaries.contains(beneficiary2));
    }

    @Test
    public void testGetBeneficiaryList_Empty() {
        String email = "test@example.com";

        when(beneficiaryRepository.findAllByAddedByEmail(email)).thenReturn(Arrays.asList());

        List<Beneficiary> beneficiaries = beneficiaryService.getBeneficiaryList(email);

        assertNotNull(beneficiaries);
        assertEquals(0, beneficiaries.size());
    }
}







import com.bank.api.dto.JWTRequest;
import com.bank.api.entity.PersonalDetails;
import com.bank.api.repositories.PersonalDetailsRepository;
import com.bank.api.services.PersonalDetailsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PersonalDetailsServiceTest {

    @InjectMocks
    private PersonalDetailsService personalDetailsService;

    @Mock
    private PersonalDetailsRepository personalDetailsRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSave() {
        PersonalDetails personalDetails = new PersonalDetails();

        when(personalDetailsRepository.save(personalDetails)).thenReturn(personalDetails);

        Object result = personalDetailsService.save(personalDetails);

        assertNotNull(result);
        assertEquals(personalDetails, result);
    }

    @Test
    public void testIsExist() {
        String email = "test@example.com";

        when(personalDetailsRepository.existsById(email)).thenReturn(true);

        boolean exists = personalDetailsService.isExist(email);

        assertTrue(exists);
    }

    @Test
    public void testGetDetailsByEmail() {
        String email = "test@example.com";
        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setEmail(email);

        when(personalDetailsRepository.findById(email)).thenReturn(Optional.of(personalDetails));

        PersonalDetails retrievedDetails = personalDetailsService.getDetailsByEmail(email);

        assertNotNull(retrievedDetails);
        assertEquals(email, retrievedDetails.getEmail());
    }

    @Test
    public void testGetDetailsByEmail_NotFound() {
        String email = "test@example.com";

        when(personalDetailsRepository.findById(email)).thenReturn(Optional.empty());

        PersonalDetails retrievedDetails = personalDetailsService.getDetailsByEmail(email);

        assertNull(retrievedDetails);
    }

    // Add similar tests for other methods as needed

    // ...

}



















import com.bank.api.entity.Transaction;
import com.bank.api.repositories.TransactionRepository;
import com.bank.api.services.TransactionService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

public class TransactionServiceTest {

    @InjectMocks
    private TransactionService transactionService;

    @Mock
    private TransactionRepository transactionRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateTransaction() {
        Transaction transaction = new Transaction();

        // Mock the behavior of the transactionRepository.save method
        when(transactionRepository.save(transaction)).thenReturn(transaction);

        // Call the updateTransaction method
        transactionService.updateTransaction(transaction);

        // Verify that transactionRepository.save was called with the transaction object
        verify(transactionRepository, times(1)).save(transaction);
    }
}





logics






import com.bank.api.dto.*;
import com.bank.api.entity.*;
import com.bank.api.helper.ModelConverter;
import com.bank.api.helper.ValueExtrecterFromPrinciple;
import com.bank.api.services.AccountService;
import com.bank.api.services.PersonalDetailsService;
import com.bank.api.services.TransactionService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import static org.mockito.Mockito.*;

public class AccountLogicsTest {

    @InjectMocks
    private AccountLogics accountLogics;

    @Mock
    private AccountService accountService;

    @Mock
    private PersonalDetailsService personalDetailsService;

    @Mock
    private TransactionService transactionService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testTransferMoney_InvalidTargetAccount() {
        // Create mock data for the test case
        TransferRequest transferRequest = new TransferRequest();
        transferRequest.setAccountNumber(2); // Target account number
        Principal principal = mock(Principal.class);

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(2)).thenReturn(null);

        // Call the transferMoney method
        ResponseEntity<Object> response = accountLogics.transferMoney(transferRequest, principal);

        // Verify the behavior and response
        verify(accountService, never()).updateAccount(any());
        verify(transactionService, never()).updateTransaction(any());
        verify(personalDetailsService, times(1)).getDetailsByAccountNumber(2);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Invalid account number.", response.getBody());
    }

    @Test
    public void testTransferMoney_SameAccount() {
        // Create mock data for the test case
        TransferRequest transferRequest = new TransferRequest();
        transferRequest.setAccountNumber(1); // Same account number as the principal
        Principal principal = mock(Principal.class);
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Call the transferMoney method
        ResponseEntity<Object> response = accountLogics.transferMoney(transferRequest, principal);

        // Verify the behavior and response
        verify(accountService, never()).updateAccount(any());
        verify(transactionService, never()).updateTransaction(any());
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("You cannot send money to your own account.", response.getBody());
    }

    @Test
    public void testTransferMoney_InvalidTransactionPassword() {
        // Create mock data for the test case
        TransferRequest transferRequest = new TransferRequest();
        transferRequest.setAccountNumber(2); // Target account number
        transferRequest.setTransactionPassword("invalid_password");
        Principal principal = mock(Principal.class);
        PersonalDetails targetAccount = new PersonalDetails();
        targetAccount.setAccountNumber(2); // Target account number
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        currentAccount.getAccount().setTransactionPassword("correct_password");
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(2)).thenReturn(targetAccount);

        // Call the transferMoney method
        ResponseEntity<Object> response = accountLogics.transferMoney(transferRequest, principal);

        // Verify the behavior and response
        verify(accountService, never()).updateAccount(any());
        verify(transactionService, never()).updateTransaction(any());
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Invalid transaction password.", response.getBody());
    }

    @Test
    public void testTransferMoney_InvalidName() {
        // Create mock data for the test case
        TransferRequest transferRequest = new TransferRequest();
        transferRequest.setAccountNumber(2); // Target account number
        transferRequest.setTransactionPassword("correct_password");
        transferRequest.setFirstName("incorrect_first_name");
        transferRequest.setLastName("incorrect_last_name");
        Principal principal = mock(Principal.class);
        PersonalDetails targetAccount = new PersonalDetails();
        targetAccount.setAccountNumber(2); // Target account number
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        currentAccount.getAccount().setTransactionPassword("correct_password");
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(2)).thenReturn(targetAccount);

        // Call the transferMoney method
        ResponseEntity<Object> response = accountLogics.transferMoney(transferRequest, principal);

        // Verify the behavior and response
        verify(accountService, never()).updateAccount(any());
        verify(transactionService, never()).updateTransaction(any());
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Invalid name.", response.getBody());
    }

    @Test
    public void testTransferMoney_InvalidBalance() {
        // Create mock data for the test case
        TransferRequest transferRequest = new TransferRequest();
        transferRequest.setAccountNumber(2); // Target account number
        transferRequest.setTransactionPassword("correct_password");
        transferRequest.setFirstName("correct_first_name");
        transferRequest.setLastName("correct_last_name");
        transferRequest.setAmount(1000); // More than the current balance
        Principal principal = mock(Principal.class);
        PersonalDetails targetAccount = new PersonalDetails();
        targetAccount.setAccountNumber(2); // Target account number
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        currentAccount.getAccount().setTransactionPassword("correct_password");
        currentAccount.getAccount().setBalance(500); // Current balance
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(2)).thenReturn(targetAccount);

        // Call the transferMoney method
        ResponseEntity<Object> response = accountLogics.transferMoney(transferRequest, principal);

        // Verify the behavior and response
        verify(accountService, never()).updateAccount(any());
        verify(transactionService, never()).updateTransaction(any());
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Insufficient balance.", response.getBody());
    }

    // Additional test cases for transferMoney with valid data and other methods...

    @Test
    public void testGetAccountTransaction_InvalidAccount() {
        // Create mock data for the test case
        int accountId = 2; // Invalid account number
        Principal principal = mock(Principal.class);
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(accountId)).thenReturn(null);

        // Call the getAccountTransaction method
        ResponseEntity<Object> response = accountLogics.getAccountTransaction(accountId, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Invalid account number.", response.getBody());
    }

    @Test
    public void testGetAccountTransaction_ValidAccount() {
        // Create mock data for the test case
        int accountId = 2; // Valid account number
        Principal principal = mock(Principal.class);
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        Account account = new Account();
        // Set up other properties of the account
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(accountId)).thenReturn(account);

        // Call the getAccountTransaction method
        ResponseEntity<Object> response = accountLogics.getAccountTransaction(accountId, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("account.getTrans()", response.getBody()); // Replace with the expected response
    }

    @Test
    public void testGetTransaction() {
        // Create mock data for the test case
        Principal principal = mock(Principal.class);
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        int accountNumber = 1;
        List<Transaction> transactions = new ArrayList<>();
        // Add sample transactions to the list

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(accountNumber)).thenReturn(new Account(accountNumber));
        when(transactionService.getTransactionResponseListFromTransactionList(transactions, principal))
            .thenReturn(new ArrayList<>()); // Replace with your expected response

        // Call the getTransaction method
        ResponseEntity<Object> response = accountLogics.getTransaction(principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(new ArrayList<>(), response.getBody()); // Replace with your expected response
    }

    @Test
    public void testGetAccountInfo() {
        // Create mock data for the test case
        Principal principal = mock(Principal.class);
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        currentAccount.setRole("ADMIN"); // Set role for admin test
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        int accountNumber = 1;
        Account account = new Account(accountNumber);
        account.setBalance(1000); // Sample balance

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(accountNumber)).thenReturn(account);

        // Call the getAccountInfo method
        ResponseEntity<Object> response = accountLogics.getAccountInfo(principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        AccountResponse expectedResponse = new AccountResponse();
        expectedResponse.setAccountNumber(accountNumber);
        expectedResponse.setBalance(account.getBalance());
        expectedResponse.setAdmin(true);
        assertEquals(expectedResponse, response.getBody()); // Replace with your expected response
    }

    @Test
    public void testGetAccount_InvalidAccount() {
        // Create mock data for the test case
        int accountId = 2; // Invalid account number
        Principal principal = mock(Principal.class);
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(accountId)).thenReturn(null);

        // Call the getAccount method
        ResponseEntity<Object> response = accountLogics.getAccount(accountId, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Invalid account number.", response.getBody());
    }

    @Test
    public void testDepositMoney() {
        // Create mock data for the test case
        DepositRequest depositRequest = new DepositRequest();
        depositRequest.setAccountNumber(1); // Valid account number
        depositRequest.setAmount(500); // Deposit amount
        Principal principal = mock(Principal.class);
        Account account = new Account(1);
        account.setBalance(1000); // Current balance
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(depositRequest.getAccountNumber())).thenReturn(account);

        // Call the depositMoney method
        ResponseEntity<Object> response = accountLogics.depositMoney(depositRequest, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1500, account.getBalance()); // Updated balance
    }

    @Test
    public void testWithdrawMoney_InsufficientBalance() {
        // Create mock data for the test case
        DepositRequest depositRequest = new DepositRequest();
        depositRequest.setAccountNumber(1); // Valid account number
        depositRequest.setAmount(1500); // Withdrawal amount exceeds balance
        Principal principal = mock(Principal.class);
        Account account = new Account(1);
        account.setBalance(1000); // Current balance
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(depositRequest.getAccountNumber())).thenReturn(account);

        // Call the withdrawMoney method
        ResponseEntity<Object> response = accountLogics.withdrawMoney(depositRequest, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Insufficient balance", response.getBody());
    }

    @Test
    public void testWithdrawMoney() {
        // Create mock data for the test case
        DepositRequest depositRequest = new DepositRequest();
        depositRequest.setAccountNumber(1); // Valid account number
        depositRequest.setAmount(500); // Withdrawal amount
        Principal principal = mock(Principal.class);
        Account account = new Account(1);
        account.setBalance(1000); // Current balance
        PersonalDetails currentAccount = new PersonalDetails();
        currentAccount.setAccountNumber(1); // Principal's account number
        when(((Authentication) principal).getPrincipal()).thenReturn(currentAccount);

        // Set up the behavior of the mock dependencies
        when(accountService.getAccount(depositRequest.getAccountNumber())).thenReturn(account);

        // Call the withdrawMoney method
        ResponseEntity<Object> response = accountLogics.withdrawMoney(depositRequest, principal);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(500, account.getBalance()); // Updated balance
    }

    // Additional test cases for getTransaction, getAccountInfo, getAccount, depositMoney, and withdrawMoney...
}

















import com.bank.api.dto.BeneficiaryRequest;
import com.bank.api.entity.Beneficiary;
import com.bank.api.entity.PersonalDetails;
import com.bank.api.services.BeneficiaryService;
import com.bank.api.services.PersonalDetailsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class BeneficiaryLogicsTest {

    @InjectMocks
    private BeneficiaryLogics beneficiaryLogics;

    @Mock
    private BeneficiaryService beneficiaryService;

    @Mock
    private PersonalDetailsService personalDetailsService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddBeneficiary() {
        // Create mock data for the test case
        BeneficiaryRequest beneficiaryRequest = new BeneficiaryRequest();
        beneficiaryRequest.setAccountNumber(123);
        beneficiaryRequest.setFirstName("John");
        beneficiaryRequest.setLastName("Doe");

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setAccountNumber(beneficiaryRequest.getAccountNumber());
        personalDetails.setFirstName("John");
        personalDetails.setLastName("Doe");

        PersonalDetails loggedInUser = new PersonalDetails();
        loggedInUser.setEmail("user@example.com");

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(beneficiaryRequest.getAccountNumber())).thenReturn(personalDetails);
        when(beneficiaryService.getBeneficiaryList(loggedInUser.getEmail())).thenReturn(new ArrayList<>());

        // Call the addBeneficiary method
        ResponseEntity<Object> response = beneficiaryLogics.addBeneficiary(beneficiaryRequest, loggedInUser);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    public void testAddBeneficiaryInvalidAccount() {
        // Create mock data for the test case
        BeneficiaryRequest beneficiaryRequest = new BeneficiaryRequest();
        beneficiaryRequest.setAccountNumber(123);
        beneficiaryRequest.setFirstName("John");
        beneficiaryRequest.setLastName("Doe");

        // Set up the behavior of the mock dependencies to return null (invalid account)
        when(personalDetailsService.getDetailsByAccountNumber(beneficiaryRequest.getAccountNumber())).thenReturn(null);

        // Call the addBeneficiary method
        ResponseEntity<Object> response = beneficiaryLogics.addBeneficiary(beneficiaryRequest, null);

        // Verify the behavior and response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertTrue(response.getBody().toString().contains("Invalid account number"));
    }

    @Test
    public void testAddBeneficiaryNameNotMatched() {
        // Create mock data for the test case
        BeneficiaryRequest beneficiaryRequest = new BeneficiaryRequest();
        beneficiaryRequest.setAccountNumber(123);
        beneficiaryRequest.setFirstName("John");
        beneficiaryRequest.setLastName("Doe");

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setAccountNumber(beneficiaryRequest.getAccountNumber());
        personalDetails.setFirstName("Jane"); // Different first name
        personalDetails.setLastName("Smith"); // Different last name

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(beneficiaryRequest.getAccountNumber())).thenReturn(personalDetails);

        // Call the addBeneficiary method
        ResponseEntity<Object> response = beneficiaryLogics.addBeneficiary(beneficiaryRequest, null);

        // Verify the behavior and response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertTrue(response.getBody().toString().contains("Name not matched"));
    }

    @Test
    public void testAddBeneficiaryAccountAlreadyPresent() {
        // Create mock data for the test case
        BeneficiaryRequest beneficiaryRequest = new BeneficiaryRequest();
        beneficiaryRequest.setAccountNumber(123);
        beneficiaryRequest.setFirstName("John");
        beneficiaryRequest.setLastName("Doe");

        PersonalDetails personalDetails = new PersonalDetails();
        personalDetails.setAccountNumber(beneficiaryRequest.getAccountNumber());
        personalDetails.setFirstName("John");
        personalDetails.setLastName("Doe");

        PersonalDetails loggedInUser = new PersonalDetails();
        loggedInUser.setEmail("user@example.com");

        List<Beneficiary> beneficiaries = new ArrayList<>();
        Beneficiary existingBeneficiary = new Beneficiary();
        existingBeneficiary.setAccountNumber(beneficiaryRequest.getAccountNumber());
        beneficiaries.add(existingBeneficiary);

        // Set up the behavior of the mock dependencies
        when(personalDetailsService.getDetailsByAccountNumber(beneficiaryRequest.getAccountNumber())).thenReturn(personalDetails);
        when(beneficiaryService.getBeneficiaryList(loggedInUser.getEmail())).thenReturn(beneficiaries);

        // Call the addBeneficiary method
        ResponseEntity<Object> response = beneficiaryLogics.addBeneficiary(beneficiaryRequest, loggedInUser);

        // Verify the behavior and response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertTrue(response.getBody().toString().contains("Account already present"));
    }

    @Test
    public void testGetBeneficiaries() {
        // Create mock data for the test case
        PersonalDetails loggedInUser = new PersonalDetails();
        loggedInUser.setEmail("user@example.com");

        List<Beneficiary> beneficiaries = new ArrayList<>();
        beneficiaries.add(new Beneficiary());
        beneficiaries.add(new Beneficiary());

        // Set up the behavior of the mock dependencies
        when(beneficiaryService.getBeneficiaryList(loggedInUser.getEmail())).thenReturn(beneficiaries);

        // Call the getBeneficiaries method
        ResponseEntity<Object> response = beneficiaryLogics.getBeneficiaries(loggedInUser);

        // Verify the behavior and response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody() instanceof List);
        assertEquals(beneficiaries.size(), ((List<?>) response.getBody()).size());
    }

}












import com.bank.api.controllers.PersonalDetailsController;
import com.bank.api.dto.*;
import com.bank.api.entity.PersonalDetails;
import com.bank.api.services.PersonalDetailsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PersonalDetailsControllerTest {

    @InjectMocks
    private PersonalDetailsController personalDetailsController;

    @Mock
    private PersonalDetailsService personalDetailsService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateAccountSuccess() {
        PersonalDetailsRequest request = new PersonalDetailsRequest();
        // Initialize request with required data

        when(personalDetailsService.isExist(request.getEmail())).thenReturn(false);
        when(personalDetailsService.getAccountCount()).thenReturn(1L);

        ResponseEntity<Object> response = personalDetailsController.createAccount(request);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertTrue(response.getBody() instanceof AccountCreatedResponse);
    }

    @Test
    public void testCreateAccountEmailInUse() {
        PersonalDetailsRequest request = new PersonalDetailsRequest();
        // Initialize request with required data

        when(personalDetailsService.isExist(request.getEmail())).thenReturn(true);

        ResponseEntity<Object> response = personalDetailsController.createAccount(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Email address is used.", response.getBody());
    }

    @Test
    public void testEnableNetBankingSuccess() {
        EnableNetBankingModel request = new EnableNetBankingModel();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetailsService.getAccountCount()).thenReturn(2L);
        when(personalDetailsService.isNetBankingAlreadyEnabled(request.getAccountNumber())).thenReturn(false);

        ResponseEntity<Object> response = personalDetailsController.enableNetBanking(request);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Netbanking enabled.", response.getBody());
    }

    @Test
    public void testEnableNetBankingPendingRequest() {
        EnableNetBankingModel request = new EnableNetBankingModel();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetailsService.getAccountCount()).thenReturn(2L);
        when(personalDetails.getAccepted()).thenReturn(null);

        ResponseEntity<Object> response = personalDetailsController.enableNetBanking(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Your account opening request is pending.", response.getBody());
    }

    @Test
    public void testGetUsernameSuccess() {
        ForgotUsernameRequest request = new ForgotUsernameRequest();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetails.getIdentityProofNumber()).thenReturn(request.getAadharNumber());

        ResponseEntity<Object> response = personalDetailsController.getUsername(request);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody().toString().startsWith("Your username is"));
    }

    @Test
    public void testGetUsernameNoAccountFound() {
        ForgotUsernameRequest request = new ForgotUsernameRequest();
        // Initialize request with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(null);

        ResponseEntity<Object> response = personalDetailsController.getUsername(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("No account found!", response.getBody());
    }

    @Test
    public void testGetUsernameInvalidAadharNumber() {
        ForgotUsernameRequest request = new ForgotUsernameRequest();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetails.getIdentityProofNumber()).thenReturn("InvalidAadharNumber");

        ResponseEntity<Object> response = personalDetailsController.getUsername(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Wrong aadhar number", response.getBody());
    }

    @Test
    public void testForgotPasswordSuccess() {
        ForgotPasswordRequest request = new ForgotPasswordRequest();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetails.getIdentityProofNumber()).thenReturn(request.getAadharNumber());
        when(personalDetails.getUsername()).thenReturn(request.getUserId());

        ResponseEntity<Object> response = personalDetailsController.forgotPassword(request);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Password is updated.", response.getBody());
    }

    @Test
    public void testForgotPasswordNoAccountFound() {
        ForgotPasswordRequest request = new ForgotPasswordRequest();
        // Initialize request with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(null);

        ResponseEntity<Object> response = personalDetailsController.forgotPassword(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("No account found!", response.getBody());
    }

    @Test
    public void testForgotPasswordInvalidAadharNumber() {
        ForgotPasswordRequest request = new ForgotPasswordRequest();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetails.getIdentityProofNumber()).thenReturn("InvalidAadharNumber");

        ResponseEntity<Object> response = personalDetailsController.forgotPassword(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Wrong aadhar number", response.getBody());
    }

    @Test
    public void testForgotPasswordInvalidUserId() {
        ForgotPasswordRequest request = new ForgotPasswordRequest();
        // Initialize request with required data

        PersonalDetails personalDetails = new PersonalDetails();
        // Initialize personalDetails with required data

        when(personalDetailsService.getDetailsByAccountNumber(request.getAccountNumber())).thenReturn(personalDetails);
        when(personalDetails.getIdentityProofNumber()).thenReturn(request.getAadharNumber());
        when(personalDetails.getUsername()).thenReturn("InvalidUserId");

        ResponseEntity<Object> response = personalDetailsController.forgotPassword(request);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Wrong User ID", response.getBody());
    }

    // Write more test cases for other scenarios and methods
}


