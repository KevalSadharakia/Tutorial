import com.bank.api.controllers.AccountController;
import com.bank.api.dto.TransferRequest;
import com.bank.api.entity.Account;
import com.bank.api.helper.AccountLogics;
import com.bank.api.services.AccountService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.security.Principal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class AccountControllerTest {

    @InjectMocks
    private AccountController accountController;

    @Mock
    private AccountLogics accountLogics;

    @Mock
    private AccountService accountService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testTransferMoney() {
        TransferRequest transferRequest = new TransferRequest();
        Principal principal = mock(Principal.class);
        
        // Mock the behavior of accountLogics.transferMoney
        when(accountLogics.transferMoney(transferRequest, principal)).thenReturn(ResponseEntity.ok("Transfer successful"));

        ResponseEntity<Object> response = accountController.transferMoney(transferRequest, principal);

        assertEquals(ResponseEntity.ok("Transfer successful"), response);
    }

    @Test
    public void testGetAccountInfo() {
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountLogics.getAccountInfo
        when(accountLogics.getAccountInfo(principal)).thenReturn(ResponseEntity.ok("Account info"));

        ResponseEntity<Object> response = accountController.getAccountInfo(principal);

        assertEquals(ResponseEntity.ok("Account info"), response);
    }

    @Test
    public void testGetTransactions() {
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountLogics.getTransaction
        when(accountLogics.getTransaction(principal)).thenReturn(ResponseEntity.ok("Transactions"));

        ResponseEntity<Object> response = accountController.getTransactions(principal);

        assertEquals(ResponseEntity.ok("Transactions"), response);
    }

    @Test
    public void testUpdate() {
        Account account = new Account();
        Principal principal = mock(Principal.class);

        // Mock the behavior of accountService.updateAccount
        doNothing().when(accountService).updateAccount(account);

        // Mock the behavior of accountService.getAccount
        when(accountService.getAccount(account.getAccountNumber())).thenReturn(account);

        ResponseEntity<Object> response = accountController.update(account, principal);

        assertEquals(ResponseEntity.ok(account), response);
    }

    // Write similar test cases for other controller methods...
}
